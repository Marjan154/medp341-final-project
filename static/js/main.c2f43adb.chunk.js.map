{"version":3,"sources":["components/Timer.js","components/Home.js","intro.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","minutes","props","seconds","addTime","moreTime","currTime","convertTimetoSecs","newTime","convertSecsToTime","setState","loseTime","lost","resetTime","componentDidMount","time","Math","floor","this","myInterval","setInterval","setSeconds","clearInterval","setMinutes","fontSize","color","class","style","width","textAlign","Component","Home","wordsAndStyles","split","map","word","i","index","display","margin","rotateBy","marginBy","generateRandomStyle","wordsObject","random","colors","fontWeights","rotation","transform","fontWeight","length","fontFamily","breakParagraph","breakP","arr","times","selected","replaceIndex","newStyles","goodWords","includes","antonyms","generateParagraph","id","handleAnswer","type","questionNumber","productivityLevel","anxietyLevel","productivityCount","unproductiveCount","questions","displayTimeMessage","message","timeMessage","document","createElement","textContent","className","body","appendChild","setTimeout","elements","getElementsByClassName","parentNode","removeChild","setTimesUp","timesUp","console","log","replay","done","displayQuestion","question","situation","optionBad","optionGood","Button","variant","size","onClick","backgroundColor","height","good","healthy","well","satisfactory","progress","managable","balanced","organized","together","responsible","productive","successful","styles","progressBars","float","marginLeft","mybody","plevel","round","ulevel","progressColor","level","paragraph","ProgressBar","animated","now","label","position","bottom","left","font","add","reset","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c2f43adb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\n\n// Used https://medium.com/better-programming/building-a-simple-countdown-timer-with-react-4ca32763dda7\n// as base code, and changed functionality\nexport default class Timer extends Component {\n  state = {\n    minutes: this.props.minutes || 3,\n    seconds: this.props.seconds || 30,\n  };\n\n  componentDidMount() {\n    // Send addTime and losetime functions to parent App\n    this.props.addTime(this.addTime);\n    this.props.loseTime(this.loseTime);\n    this.props.resetTime(this.resetTime);\n\n    // Handles minute and seconds change\n    this.myInterval = setInterval(() => {\n      const { seconds, minutes } = this.state;\n      if (seconds > 0) {\n        this.props.setSeconds && this.props.setSeconds(seconds - 1);\n        this.setState(({ seconds }) => ({\n          seconds: seconds - 1,\n        }));\n      }\n      if (seconds === 0) {\n        if (minutes === 0) {\n          clearInterval(this.myInterval);\n          this.props.setMinutes && this.props.setMinutes(0);\n          this.props.setSeconds && this.props.setSeconds(0);\n        } else {\n          this.props.setMinutes && this.props.setMinutes(minutes - 1);\n          this.props.setSeconds && this.props.setSeconds(59);\n          this.setState(({ minutes }) => ({\n            minutes: minutes - 1,\n            seconds: 59,\n          }));\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n  }\n\n  //Adds time on to timeer\n  addTime = (moreTime) => {\n    let currTime = this.convertTimetoSecs(this.state);\n    let newTime = this.convertSecsToTime(currTime + moreTime);\n    this.setState({ seconds: newTime.seconds, minutes: newTime.minutes });\n  };\n\n  // Removes time from timer\n  loseTime = (lost) => {\n    let currTime = this.convertTimetoSecs(this.state);\n    let newTime = this.convertSecsToTime(\n      currTime - lost >= 0 ? currTime - lost : 0\n    );\n    this.setState({ seconds: newTime.seconds, minutes: newTime.minutes });\n  };\n\n  resetTime = () => {\n    this.setState({ minutes: 3, seconds: 30 });\n    this.componentDidMount();\n  };\n\n  // Time conversion helpers\n  convertSecsToTime = (time) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = time - minutes * 60;\n    return { minutes, seconds };\n  };\n  convertTimetoSecs = (time) => {\n    const { minutes, seconds } = time;\n    return minutes * 60 + seconds;\n  };\n\n  render() {\n    const { minutes, seconds } = this.state;\n\n    // Annoying hack to inversely increase fontisize with decreasing time\n    const fontSize =\n      minutes > 0 ? (120 / minutes < 40 ? 40 : 120 / minutes) : 180 - seconds;\n\n    const color = minutes <= 1 ? \"red\" : \"black\";\n    return (\n      <div>\n        <div>\n          {(minutes > 0 || seconds > 0) && <h1>Timer:</h1>}\n          {minutes === 0 && seconds === 0 ? (\n            <h1\n              class=\"wiggle\"\n              style={{\n                fontSize: 120,\n                color: \"red\",\n                width: \"inherit\",\n                textAlign: \"center\",\n              }}\n            >\n              Times Up!\n            </h1>\n          ) : (\n            <h1\n              class={minutes <= 1 ? \"wiggleSlow\" : \"\"}\n              style={{ fontSize, color }}\n            >\n              {minutes}:{seconds < 10 ? `0${seconds}` : seconds}\n            </h1>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport questions from \"../situations.json\";\nimport { Button, ProgressBar } from \"react-bootstrap\";\nimport introText from \"../intro.js\";\nimport Timer from \"./Timer\";\n\n//Dont forget API call\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionNumber: 0,\n      productivityLevel: 100,\n      anxietyLevel: 0,\n      wordsAndStyles: [],\n      productivityCount: 0,\n      unproductiveCount: 0,\n      timesUp: false,\n      minutes: 3,\n      seconds: 30,\n    };\n    // 4:5 ratio\n    this.goodWords = [\n      \"good\",\n      \"healthy\",\n      \"well\",\n      \"satisfactory\",\n      \"progress\",\n      \"managable\",\n      \"balanced\",\n      \"organized\",\n      \"together\",\n      \"responsible\",\n      \"productive\",\n      \"successful\",\n    ];\n    this.antonyms = {\n      good: \"bad\",\n      healthy: \"unhealthy\",\n      well: \"not well\",\n      satisfactory: \"disatisfactory\",\n      progress: \"procrastination\",\n      managable: \"unmanagable\",\n      balanced: \"unbalanced\",\n      organized: \"disorganized\",\n      together: \"broken\",\n      responsible: \"irresponsible\",\n      productive: \"unproductive\",\n      successful: \"unsuccessful\",\n    };\n    this.styles = {\n      progressBars: {\n        width: \"75%\",\n        textAlign: \"left\",\n        margin: \"50px auto\",\n        float: \"right\",\n        marginLeft: \"5vw\",\n      },\n      mybody: {\n        margin: \"1% 7%\",\n        textAlign: \"center\",\n      },\n    };\n  }\n\n  // Convert intro paragraph text to individually styled spans\n  componentDidMount = () => {\n    const wordsAndStyles = introText.split(\" \").map((word, i) => {\n      const style = {\n        display: \"inline-block\",\n        margin: \"3px\",\n      };\n      return { index: i, word, display: word, style, rotateBy: 0, marginBy: 2 };\n    });\n    this.setState({ wordsAndStyles });\n  };\n\n  // Returns random style for rotation, fontweight, margin and colors\n  generateRandomStyle = (wordsObject) => {\n    const { rotateBy, marginBy } = wordsObject;\n    const margin = Math.floor(Math.random() + 10 - 5);\n    const colors = [\n      \"red\",\n      \"black\",\n      \"black\",\n      \"#4a0417\",\n      \"black\",\n      \"#fcba03\",\n      \"#4a0417\",\n      \"red\",\n    ];\n    const fontWeights = [100, 400, 700];\n    const rotation = Math.floor(Math.random() * 201 - 100);\n    return {\n      display: \"inline-block\",\n      transform: `rotate(${rotateBy + rotation}deg)`,\n      margin: `${marginBy + margin}px`,\n      fontWeight: fontWeights[Math.floor(Math.random() * fontWeights.length)],\n      color: colors[Math.floor(Math.random() * colors.length)],\n      fontFamily: \"Special Elite\",\n    };\n  };\n\n  /**\n   * @param {boolean} breakP true to break paragraph, false to fix paragraph\n   * This function randomly selects words in pargraph and styles\n   * good words and randomly styles bad ones. Converts word words to bad\n   * if breaking paragraph, and bad words back to big if fixing paragraph\n   */\n  breakParagraph = (breakP) => {\n    const { wordsAndStyles } = this.state;\n    const arr = wordsAndStyles;\n    const times = breakP ? 5 : 15; // change more good words than bad\n    for (let i = 0; i < times; i++) {\n      // pick random word to style\n      const selected = Math.floor(Math.random() * wordsAndStyles.length);\n      const replaceIndex = wordsAndStyles[selected].index;\n      let newStyles = {\n        display: \"inline-block\",\n        margin: \"3px\",\n      };\n      // If breaking paragraph, give random style to word and\n      // replace word if it is a good word. otherwise reset styles and fix word.\n      if (breakP) {\n        newStyles = this.generateRandomStyle(wordsAndStyles[selected]);\n        if (this.goodWords.includes(arr[replaceIndex].word)) {\n          arr[replaceIndex].display = this.antonyms[arr[replaceIndex].word];\n        }\n      } else {\n        if (arr[replaceIndex].word !== arr[replaceIndex].display) {\n          arr[replaceIndex].display = arr[replaceIndex].word;\n        }\n        if (this.goodWords.includes(arr[replaceIndex].display)) {\n          newStyles = {\n            display: \"inline-block\",\n            margin: \"3px\",\n            color: \"green\",\n          };\n        }\n      }\n      arr[replaceIndex].style = newStyles;\n    }\n    this.setState({ wordsAndStyles: arr });\n  };\n\n  // Take words and style objects and displays them as a paragraph\n  generateParagraph = () => {\n    const { wordsAndStyles } = this.state;\n\n    const paragraph = wordsAndStyles.map((word, i) => (\n      <span id={`word-${i}`} style={word.style}>\n        {word.display + \" \"}\n      </span>\n    ));\n    return paragraph;\n  };\n\n  // Handles answer selection. Updates progress bars and\n  // breaks or fixes paragraph based on choice\n  handleAnswer = (type) => {\n    const {\n      questionNumber,\n      productivityLevel,\n      anxietyLevel,\n      productivityCount,\n      unproductiveCount,\n    } = this.state;\n    if (type === \"bad\") {\n      this.setState({\n        unproductiveCount: unproductiveCount + 1,\n        productivityLevel: productivityLevel <= 10 ? 0 : productivityLevel - 10,\n        anxietyLevel: anxietyLevel >= 100 ? 100 : anxietyLevel + 10,\n      });\n      this.breakParagraph(true);\n    } else {\n      this.setState({\n        productivityCount: productivityCount + 1,\n        anxietyLevel: anxietyLevel <= 10 ? 0 : anxietyLevel - 10,\n        productivityLevel:\n          productivityLevel >= 100 ? 100 : productivityLevel + 10,\n      });\n      this.breakParagraph(false);\n    }\n    this.setState({\n      questionNumber:\n        questionNumber >= questions.length - 1 ? 0 : questionNumber + 1,\n    });\n  };\n\n  // Create and show animated time message, and then remove the element\n  displayTimeMessage = (message, color) => {\n    let timeMessage = document.createElement(\"div\");\n    timeMessage.textContent = message;\n    timeMessage.className = \"timeMessage\";\n    timeMessage.style.color = color;\n    document.body.appendChild(timeMessage);\n    let myInterval = setTimeout(() => {\n      let elements = document.getElementsByClassName(\"timeMessage\");\n      elements[0].parentNode.removeChild(elements[0]);\n    }, 1000);\n    clearInterval(myInterval);\n  };\n\n  setTimesUp = () => {\n    this.setState({ timesUp: true });\n    console.log(\"SETTING TIME\", this.state.timesUp);\n  };\n  setMinutes = (minutes) => {\n    this.setState({ minutes: minutes });\n  };\n  setSeconds = (seconds) => {\n    this.setState({ seconds: seconds });\n  };\n\n  replay = () => {\n    this.setState({\n      minutes: 30,\n      seconds: 30,\n      done: false,\n      productivityLevel: 100,\n      anxietyLevel: 0,\n      productivityCount: 0,\n      unproductiveCount: 0,\n    });\n    this.resetTime();\n  };\n  // Sets up questions display. Handles answer and adjusts time\n  displayQuestion = (question) => {\n    const { situation, optionBad, optionGood } = question;\n    const { minutes, seconds } = this.state;\n    // if times up, display play again\n    if (minutes === 0 && seconds === 0) {\n      return (\n        <div>\n          <Button\n            variant=\"secondary\"\n            size=\"lg\"\n            onClick={this.replay}\n            style={{\n              backgroundColor: \"#1aabab\",\n              margin: \"5px\",\n              width: \"25%\",\n              height: \"70px\",\n              fontSize: \"1vw\",\n            }}\n          >\n            Play Again\n          </Button>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h2>{situation}</h2>\n          <br />\n          <Button\n            variant=\"secondary\"\n            size=\"lg\"\n            onClick={() => {\n              this.handleAnswer(\"bad\");\n              this.displayTimeMessage(\"-20\", \"red\");\n              this.loseTime(10);\n            }}\n            style={{\n              backgroundColor: \"#1aabab\",\n              margin: \"5px\",\n              width: \"25%\",\n              height: \"70px\",\n              fontSize: \"1vw\",\n            }}\n          >\n            {optionBad}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            size=\"lg\"\n            onClick={() => {\n              this.handleAnswer(\"good\");\n              this.displayTimeMessage(\"+5\", \"green\");\n              this.addTime(5);\n            }}\n            style={{\n              backgroundColor: \"#1aabab\",\n              margin: \"5px\",\n              width: \"25%\",\n              height: \"70px\",\n              fontSize: \"1vw\",\n            }}\n          >\n            {optionGood}\n          </Button>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    const {\n      questionNumber,\n      productivityLevel,\n      anxietyLevel,\n      productivityCount,\n      unproductiveCount,\n    } = this.state;\n    const plevel =\n      productivityCount + unproductiveCount <= 5\n        ? 100 - unproductiveCount * 20\n        : Math.round(\n            (productivityCount / (productivityCount + unproductiveCount)) * 100\n          );\n    const ulevel =\n      productivityCount + unproductiveCount <= 5\n        ? unproductiveCount * 20\n        : Math.round(\n            (unproductiveCount / (productivityCount + unproductiveCount)) * 100\n          );\n\n    const progressColor = (level) => {\n      return level > 60 ? \"success\" : level < 40 ? \"danger\" : \"warning\";\n    };\n    const paragraph =\n      this.state.wordsAndStyles.length && this.generateParagraph();\n    return (\n      <div className=\"App\">\n        <div style={this.styles.mybody}>\n          <h1 className=\"title\">Performance Simulation</h1>\n          <br />\n          <div className=\"introp\" style={{ display: \"block\" }}>\n            {paragraph}\n          </div>\n\n          <br />\n          <br />\n          <div>{this.displayQuestion(questions[questionNumber])}</div>\n          <div style={this.styles.progressBars}>\n            <label>Productivity:</label>\n            <br />\n            <ProgressBar\n              animated\n              now={plevel}\n              variant={progressColor(plevel)}\n              label={`${plevel}%`}\n            />\n            <br />\n            <label>Anxiety:</label>\n            <ProgressBar\n              animated\n              now={ulevel}\n              variant={progressColor(100 - ulevel)}\n              label={`${ulevel}%`}\n            />\n            <br />\n            <label>Ability to perform future tasks:</label>\n            <ProgressBar animated now={100} variant=\"info\" label={`100%`} />\n          </div>\n          <div\n            style={{\n              textAlign: \"left\",\n              position: \"absolute\",\n              bottom: 20,\n              left: 20,\n              width: \"20%\",\n              font: \"initial\",\n            }}\n          >\n            <Timer\n              setTimesUp={this.setTimesUp}\n              setMinutes={this.setMinutes}\n              setSeconds={this.setSeconds}\n              addTime={(add) => (this.addTime = add)}\n              loseTime={(lost) => (this.loseTime = lost)}\n              resetTime={(reset) => (this.resetTime = reset)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","export default `You are practicing very healthy habits. You are making good decisions that make juggling your responsibilities managable . You are making satisfactory progress towards your goals. You are a well put together person, You are practicing very healthy habits. You are very responsible. You are have a productive day. Having a productive day means you are successful . Keep it up! Maintain your healthy habits and keep striving for success, and you will reach your dreams.`;\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router basename=\"/\">\n          {/* <Navbar /> */}\n          <Route exact path=\"/\" component={Home} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}